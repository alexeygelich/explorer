{"version":3,"sources":["components/FolderList/ListItem/index.js","components/FolderList/ListItem/ListItem.jsx","components/FolderList/index.js","components/FolderList/FolderList.jsx","App.js","reportWebVitals.js","index.js","components/FolderList/ListItem/ListItem.module.css"],"names":["ListItem","branch","handleClick","parent","newParent","name","classItem","type","styles","file","show","open","close","id","data-parent","JSON","stringify","onClick","e","className","tree","children","FolderList","map","uuidv4","App","state","search","parseData","a","setState","db","console","log","openDefaultPath","openFolder","newTree","concat","parseTree","folders","parentName","splice","length","forEach","folder","subfolder","target","folderName","folderParent","dataset","parse","handleChange","value","handleSubmit","preventDefault","searchFiles","findQuery","child","includes","subChild","pathFromProps","props","expandedFolders","branchToString","pathEl","pathElToArr","split","isPresent","path","searchFn","index","pathArrAfterCheck","slice","branchChild","this","onSubmit","onChange","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"2u7MAEeA,ECGE,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,OAAQC,EAA0B,EAA1BA,YAAaC,EAAa,EAAbA,OAOnCC,EAAY,GAEdA,EADED,EACO,sBAAOA,GAAP,CAAeF,EAAOI,OAEnB,CAACJ,EAAOI,MAGtB,IAAIC,EAAY,GAOhB,OALEA,EADkB,SAAhBL,EAAOM,KACGC,IAAOC,KAEPR,EAAOS,KAAOF,IAAOG,KAAOH,IAAOI,MAI/C,qCACE,oBACEC,GAAIZ,EAAOI,KACXS,cAAaX,GAAUY,KAAKC,UAAUb,GACtCc,QAzBkB,SAACC,GACH,SAAhBjB,EAAOM,MAGXL,EAAYgB,IAsBRC,UAAWb,EAJb,SAMGL,EAAOI,OAETJ,EAAOS,MAAQ,cAAC,EAAD,CAAYU,KAAMnB,EAAOoB,SAAUnB,YAAaA,EAAaC,OAAQC,QClC5EkB,ECGI,SAAC,GAAD,IAAGF,EAAH,EAAGA,KAAMlB,EAAT,EAASA,YAAaC,EAAtB,EAAsBA,OAAtB,OACjB,6BACGiB,EAAKG,KAAI,SAACtB,GAAD,OACR,cAAC,EAAD,CAAyBA,OAAQA,EAAQC,YAAaA,EAAaC,OAAQA,GAA5DqB,qBCFAC,E,4MAKnBC,MAAQ,CACNN,KAAM,GACNO,OAAQ,I,EAOVC,U,sBAAY,sBAAAC,EAAA,+EAEF,EAAKC,SAAS,CAAEV,KAAMW,IAFpB,sDAIRC,QAAQC,IAAI,QAAZ,MAJQ,OAMV,EAAKC,kBANK,wD,EASZC,WAAa,SAAC9B,EAAMF,GAAY,IACtBiB,EAAS,EAAKM,MAAdN,KACFgB,EAAU,GAAGC,OAAOjB,GAC1B,GAAIjB,EAAJ,EACoB,SAAZmC,EAAaC,GACjB,IAAIC,EAAarC,EAAO,GAExB,GADAA,EAAOsC,OAAO,EAAG,GACK,IAAlBtC,EAAOuC,OAeT,OAdAH,EAAQI,SAAQ,SAACC,GACXA,EAAOvC,OAASmC,GAClBI,EAAOvB,SAASsB,SAAQ,SAACE,GACvB,GAAIA,EAAUxC,OAASA,EAAM,CAC3B,GAAIwC,EAAUnC,KAEZ,YADAmC,EAAUnC,MAAO,GAGnBmC,EAAUnC,MAAO,cAKzB,EAAKoB,SAAS,CAAEV,KAAMgB,IAGxBG,EAAQI,SAAQ,SAACC,GACXA,EAAOvC,OAASmC,GAClBF,EAAUM,EAAOvB,cAIvBiB,CAAUF,QAIZA,EAAQO,SAAQ,SAACC,GACf,GAAIA,EAAOvC,OAASA,EAAM,CACxB,GAAIuC,EAAOlC,KAET,YADAkC,EAAOlC,MAAO,GAGhBkC,EAAOlC,MAAO,EACdkC,EAAOvB,SAASsB,SAAQ,SAACE,GACvBA,EAAU1C,OAAS,CAACE,UAI1B,EAAKyB,SAAS,CAAEV,KAAMgB,K,EAGxBlC,YAAc,YAAiB,IAAd4C,EAAa,EAAbA,OACTC,EAAaD,EAAOjC,GACpBmC,EAAiBF,EAAOG,QAAQ9C,OAASY,KAAKmC,MAAMJ,EAAOG,QAAQ9C,QAAU,GACnF,EAAKgC,WAAWY,EAAYC,I,EAG9BG,aAAe,YAAiB,IAAdL,EAAa,EAAbA,OAChB,EAAKhB,SAAS,CAAEH,OAAQmB,EAAOM,S,EAGjCC,aAAe,SAACnC,GACdA,EAAEoC,iBACF,EAAKC,e,EAGPA,YAAc,WAAO,IAAD,EACO,EAAK7B,MAAtBN,EADU,EACVA,KAAMO,EADI,EACJA,OACRS,EAAUrB,KAAKmC,MAAMnC,KAAKC,UAAUI,IAC1CgB,EAAQO,SAAQ,SAACC,IACG,SAAZY,EAAaC,GACK1C,KAAKC,UAAUyC,GAClBC,SAAS/B,GAIT,SAAf8B,EAAMlD,MAIVkD,EAAM/C,MAAO,EACb+C,EAAMpC,SAASsB,SAAQ,SAACgB,GAAD,OAAcH,EAAUG,OAJ7C,EAAK7B,SAAS,CAAEV,KAAMgB,IAJtBqB,EAAM/C,MAAO,EAUjB8C,CAAUZ,O,EAIdV,gBAAkB,WAAO,IACfd,EAAS,EAAKM,MAAdN,KACFgB,EAAUrB,KAAKmC,MAAMnC,KAAKC,UAAUI,IACpCwC,EAAgB,EAAKC,MAAMC,gBACjC1B,EAAQO,SAAQ,SAAC1C,GACf,IAAM8D,EAAiBhD,KAAKC,UAAUf,GAEtC2D,EAAcjB,SAAQ,SAACqB,GACrB,IAAIC,EAAcD,EAAOE,MAAM,KAC3BC,GAAY,EAOhB,GALAF,EAAYtB,SAAQ,SAACyB,GACdL,EAAeL,SAASU,KAC3BD,GAAY,MAGXA,EAAL,EAIiB,SAAXE,EAAYpE,GAAuB,IAAfqE,EAAc,uDAAN,EAChC,GAAoB,SAAhBrE,EAAOM,KAAX,CAGA,IAAIgE,EAAoBN,EAAYO,MAAMF,EAAOL,EAAYvB,QACzDyB,GAAY,EAChBI,EAAkB5B,SAAQ,SAACqB,GACzB,IAAKjD,KAAKC,UAAUf,GAAQyD,SAASM,GAGnC,OAFAG,GAAY,OACZlE,EAAOS,MAAO,MAKbyD,IAILlE,EAAOS,MAAO,EACmB,IAA7B6D,EAAkB7B,SAItB4B,IACArE,EAAOoB,SAASsB,SAAQ,SAAC8B,GAAD,OAAiBJ,EAASI,EAAaH,SAEjED,CAASpE,UAGb,EAAK6B,SAAS,CAAEV,KAAK,YAAKgB,M,kEAlJ1BsC,KAAK9C,c,+BAqJG,IAAD,EACkB8C,KAAKhD,MAAtBN,EADD,EACCA,KAAMO,EADP,EACOA,OACd,OACE,qCACE,uBAAMgD,SAAUD,KAAKrB,aAArB,UACE,uBAAO9C,KAAK,OAAO6C,MAAOzB,EAAQiD,SAAUF,KAAKvB,eACjD,wBAAQ5C,KAAK,SAAb,uBAEDa,GAAQ,cAAC,EAAD,CAAYA,KAAMA,EAAMlB,YAAawE,KAAKxE,qB,GAxK1B2E,aCMlBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,CAAK3B,gBAAiB,CAAC,cAAe,iDAExC4B,SAASC,eAAe,SAM1Bb,K,kBCfAc,EAAOC,QAAU,CAAC,MAAQ,wBAAwB,KAAO,6CAA6C,KAAO,gD","file":"static/js/main.6e50b6d8.chunk.js","sourcesContent":["import ListItem from './ListItem';\n\nexport default ListItem;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport FolderList from \"../../FolderList\";\nimport styles from \"./ListItem.module.css\";\n\nconst ListItem = ({ branch, handleClick, parent }) => {\n  const handleItemClick = (e) => {\n    if (branch.type === \"FILE\") {\n      return;\n    }\n    handleClick(e);\n  };\n  let newParent = [];\n  if (parent) {\n    newParent = [...parent, branch.name];\n  } else {\n    newParent = [branch.name];\n  }\n\n  let classItem = \"\";\n  if (branch.type === \"FILE\") {\n    classItem = styles.file;\n  } else {\n    classItem = branch.show ? styles.open : styles.close;\n  }\n\n  return (\n    <>\n      <li\n        id={branch.name}\n        data-parent={parent && JSON.stringify(parent)}\n        onClick={handleItemClick}\n        className={classItem}\n      >\n        {branch.name}\n      </li>\n      {branch.show && <FolderList tree={branch.children} handleClick={handleClick} parent={newParent} />}\n    </>\n  );\n};\n\nListItem.propTypes = {\n  branch: PropTypes.object.isRequired,\n  handleClick: PropTypes.func.isRequired,\n  parent: PropTypes.array,\n};\n\nexport default ListItem;\n","import FolderList from './FolderList';\n\nexport default FolderList;\n","import React from \"react\";\nimport { v4 as uuidv4 } from 'uuid';\nimport PropTypes from \"prop-types\";\nimport ListItem from \"./ListItem\";\n\nconst FolderList = ({ tree, handleClick, parent }) => (\n  <ul>\n    {tree.map((branch) => (\n      <ListItem key={uuidv4()} branch={branch} handleClick={handleClick} parent={parent} />\n    ))}\n  </ul>\n);\n\nFolderList.propTypes = {\n  tree: PropTypes.array.isRequired,\n  handleClick: PropTypes.func.isRequired,\n  parent: PropTypes.array,\n};\n\nexport default FolderList;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport db from \"./db/data.json\";\nimport \"./App.css\";\nimport FolderList from \"./components/FolderList\";\n\nexport default class App extends Component {\n  static propTypes = {\n    expandedFolders: PropTypes.array,\n  };\n\n  state = {\n    tree: [],\n    search: \"\",\n  };\n\n  componentDidMount() {\n    this.parseData();\n  }\n\n  parseData = async () => {\n    try {\n      await this.setState({ tree: db });\n    } catch (error) {\n      console.log(\"error\", error);\n    }\n    this.openDefaultPath();\n  };\n\n  openFolder = (name, parent) => {\n    const { tree } = this.state;\n    const newTree = [].concat(tree);\n    if (parent) {\n      const parseTree = (folders) => {\n        let parentName = parent[0];\n        parent.splice(0, 1);\n        if (parent.length === 0) {\n          folders.forEach((folder) => {\n            if (folder.name === parentName) {\n              folder.children.forEach((subfolder) => {\n                if (subfolder.name === name) {\n                  if (subfolder.show) {\n                    subfolder.show = false;\n                    return;\n                  }\n                  subfolder.show = true;\n                }\n              });\n            }\n          });\n          this.setState({ tree: newTree });\n          return;\n        }\n        folders.forEach((folder) => {\n          if (folder.name === parentName) {\n            parseTree(folder.children);\n          }\n        });\n      };\n      parseTree(newTree);\n\n      return;\n    }\n    newTree.forEach((folder) => {\n      if (folder.name === name) {\n        if (folder.show) {\n          folder.show = false;\n          return;\n        }\n        folder.show = true;\n        folder.children.forEach((subfolder) => {\n          subfolder.parent = [name];\n        });\n      }\n    });\n    this.setState({ tree: newTree });\n  };\n\n  handleClick = ({ target }) => {\n    const folderName = target.id;\n    const folderParent = !!target.dataset.parent ? JSON.parse(target.dataset.parent) : \"\";\n    this.openFolder(folderName, folderParent);\n  };\n\n  handleChange = ({ target }) => {\n    this.setState({ search: target.value });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.searchFiles();\n  };\n\n  searchFiles = () => {\n    const { tree, search } = this.state;\n    const newTree = JSON.parse(JSON.stringify(tree));\n    newTree.forEach((folder) => {\n      const findQuery = (child) => {\n        const childToString = JSON.stringify(child);\n        if (!childToString.includes(search)) {\n          child.show = false;\n          return;\n        }\n        if (child.type === \"FILE\") {\n          this.setState({ tree: newTree });\n          return;\n        }\n        child.show = true;\n        child.children.forEach((subChild) => findQuery(subChild));\n      };\n      findQuery(folder);\n    });\n  };\n\n  openDefaultPath = () => {\n    const { tree } = this.state;\n    const newTree = JSON.parse(JSON.stringify(tree));\n    const pathFromProps = this.props.expandedFolders;\n    newTree.forEach((branch) => {\n      const branchToString = JSON.stringify(branch);\n\n      pathFromProps.forEach((pathEl) => {\n        let pathElToArr = pathEl.split(\"/\");\n        let isPresent = true;\n\n        pathElToArr.forEach((path) => {\n          if (!branchToString.includes(path)) {\n            isPresent = false;\n          }\n        });\n        if (!isPresent) {\n          return;\n        }\n\n        const searchFn = (branch, index = 0) => {\n          if (branch.type === \"FILE\") {\n            return;\n          }\n          let pathArrAfterCheck = pathElToArr.slice(index, pathElToArr.length);\n          let isPresent = true;\n          pathArrAfterCheck.forEach((pathEl) => {\n            if (!JSON.stringify(branch).includes(pathEl)) {\n              isPresent = false;\n              branch.show = false;\n              return;\n            }\n          });\n\n          if (!isPresent) {\n            return;\n          }\n\n          branch.show = true;\n          if (pathArrAfterCheck.length === 1) {\n            return;\n          }\n\n          index++;\n          branch.children.forEach((branchChild) => searchFn(branchChild, index));\n        };\n        searchFn(branch);\n      });\n    });\n    this.setState({ tree: [...newTree] });\n  };\n\n  render() {\n    const { tree, search } = this.state;\n    return (\n      <>\n        <form onSubmit={this.handleSubmit}>\n          <input type=\"text\" value={search} onChange={this.handleChange} />\n          <button type=\"submit\">Search</button>\n        </form>\n        {tree && <FolderList tree={tree} handleClick={this.handleClick} />}\n      </>\n    );\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App expandedFolders={[\"VC/UnitTest\", \"SDK/Bootstrapper/Packages/vcredist_arm/en\"]} />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"close\":\"ListItem_close__15tnq\",\"open\":\"ListItem_open__2KCHN ListItem_close__15tnq\",\"file\":\"ListItem_file__3t3Ql ListItem_close__15tnq\"};"],"sourceRoot":""}