{"version":3,"sources":["components/FolderList/ListItem/ListItem.jsx","components/FolderList/ListItem/ListItemContainer.jsx","components/FolderList/index.js","components/FolderList/FolderList.jsx","App.js","AppContainer.js","reportWebVitals.js","index.js","components/FolderList/ListItem/ListItem.module.css"],"names":["ListItem","branch","handleClick","parent","newParent","className","onClick","id","name","data-parent","JSON","stringify","show","tree","children","ListItemContainer","classItem","type","styles","file","open","close","e","FolderList","map","uuidv4","App","onSubmit","value","onChange","AppContainer","state","search","parseData","a","setState","db","console","log","openDefaultPath","openFolder","newTree","parse","forEach","folder","subfolder","openFolderWithParent","parseTree","folders","parentName","splice","length","target","folderName","folderParent","dataset","handleChange","handleSubmit","preventDefault","searchFiles","findQuery","child","includes","subChild","pathFromProps","props","expandedFolders","branchToString","pathEl","pathElToArr","split","isPresent","path","searchFn","index","pathArrAfterCheck","slice","branchChild","this","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.9f0383c9.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport FolderList from \"../../FolderList\";\n\nconst ListItem = ({ branch, handleClick, parent, newParent, className, onClick }) => {\n  return (\n    <>\n      <li id={branch.name} data-parent={parent && JSON.stringify(parent)} onClick={onClick} className={className}>\n        {branch.name}\n      </li>\n      {branch.show && <FolderList tree={branch.children} handleClick={handleClick} parent={newParent} />}\n    </>\n  );\n};\n\nListItem.propTypes = {\n  branch: PropTypes.object.isRequired,\n  handleClick: PropTypes.func.isRequired,\n  parent: PropTypes.array,\n  newParent: PropTypes.array,\n  className: PropTypes.string.isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default ListItem;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport ListItem from \"./ListItem\";\nimport styles from \"./ListItem.module.css\";\n\nfunction ListItemContainer({ branch, handleClick, parent }) {\n\n  const handleItemClick = (e) => {\n    if (branch.type === \"FILE\") {\n      return;\n    }\n    handleClick(e);\n  };\n\n  let newParent = [];\n\n  if (parent) {\n    newParent = [...parent, branch.name];\n  } else {\n    newParent = [branch.name];\n  }\n\n  let classItem = \"\";\n  \n  if (branch.type === \"FILE\") {\n    classItem = styles.file;\n  } else {\n    classItem = branch.show ? styles.open : styles.close;\n  }\n\n  return (\n    <ListItem\n      branch={branch}\n      parent={parent}\n      newParent={newParent}\n      onClick={handleItemClick}\n      handleClick={handleClick}\n      className={classItem}\n    />\n  );\n}\n\nListItemContainer.propTypes = {\n  branch: PropTypes.object.isRequired,\n  handleClick: PropTypes.func.isRequired,\n  parent: PropTypes.array,\n};\n\nexport default ListItemContainer;\n","import FolderList from './FolderList';\n\nexport default FolderList;\n","import React from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport PropTypes from \"prop-types\";\nimport ListItemContainer from \"./ListItem/ListItemContainer\";\n\nconst FolderList = ({ tree, handleClick, parent }) => (\n  <ul>\n    {tree.map((branch) => (\n      <ListItemContainer key={uuidv4()} branch={branch} handleClick={handleClick} parent={parent} />\n    ))}\n  </ul>\n);\n\nFolderList.propTypes = {\n  tree: PropTypes.array.isRequired,\n  handleClick: PropTypes.func.isRequired,\n  parent: PropTypes.array,\n};\n\nexport default FolderList;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./App.css\";\nimport FolderList from \"./components/FolderList\";\n\nexport default function App({ onSubmit, value, onChange, handleClick, tree }) {\n  return (\n    <>\n      <form onSubmit={onSubmit}>\n        <input type=\"text\" value={value} onChange={onChange} />\n        <button type=\"submit\">Search</button>\n      </form>\n      {tree && <FolderList tree={tree} handleClick={handleClick} />}\n    </>\n  );\n}\n\nApp.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n  value: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n  handleClick: PropTypes.func.isRequired,\n  tree: PropTypes.array.isRequired,\n};\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport db from \"./db/data.json\";\nimport App from \"./App\";\n\nexport default class AppContainer extends Component {\n  static propTypes = {\n    expandedFolders: PropTypes.array,\n  };\n\n  state = {\n    tree: [],\n    search: \"\",\n  };\n\n  componentDidMount() {\n    this.parseData();\n  }\n\n  parseData = async () => {\n    try {\n      await this.setState({ tree: db });\n    } catch (error) {\n      console.log(\"error\", error);\n    }\n\n    this.openDefaultPath();\n  };\n\n  openFolder = (name) => {\n    const { tree } = this.state;\n    const newTree = JSON.parse(JSON.stringify(tree));\n\n    newTree.forEach((folder) => {\n      if (folder.name === name) {\n        if (folder.show) {\n          folder.show = false;\n          return;\n        }\n\n        folder.show = true;\n\n        folder.children.forEach((subfolder) => {\n          subfolder.parent = name;\n        });\n      }\n    });\n\n    this.setState({ tree: newTree });\n  };\n\n  openFolderWithParent = (name, parent) => {\n    const { tree } = this.state;\n    const newTree = JSON.parse(JSON.stringify(tree));\n\n    const parseTree = (folders) => {\n      let parentName = parent.splice(0, 1)[0];\n\n      if (parent.length === 0) {\n        folders.forEach((folder) => {\n          if (folder.name === parentName) {\n            folder.children.forEach((subfolder) => {\n              if (subfolder.name === name) {\n                return (subfolder.show = !subfolder.show);\n              }\n            });\n          }\n        });\n\n        this.setState({ tree: newTree });\n        return;\n      }\n\n      folders.forEach((folder) => {\n        if (folder.name === parentName) {\n          parseTree(folder.children);\n        }\n      });\n    };\n\n    parseTree(newTree);\n    this.setState({ tree: newTree });\n  };\n\n  handleClick = ({ target }) => {\n    const folderName = target.id;\n    const folderParent = !!target.dataset.parent ? JSON.parse(target.dataset.parent) : null;\n\n    if (folderParent) {\n      this.openFolderWithParent(folderName, folderParent);\n      return;\n    }\n\n    this.openFolder(folderName);\n  };\n\n  handleChange = ({ target }) => {\n    this.setState({ search: target.value });\n  };\n\n  handleSubmit = (e) => {\n    const { search } = this.state;\n    e.preventDefault();\n\n    if (!search) {\n      return;\n    }\n\n    this.searchFiles();\n  };\n\n  searchFiles = () => {\n    const { tree, search } = this.state;\n    const newTree = JSON.parse(JSON.stringify(tree));\n\n    newTree.forEach((folder) => {\n      const findQuery = (child) => {\n        const childToString = JSON.stringify(child);\n        if (!childToString.includes(search)) {\n          child.show = false;\n          return;\n        }\n\n        if (child.type === \"FILE\") {\n          return;\n        }\n\n        child.show = true;\n        child.children.forEach((subChild) => findQuery(subChild));\n      };\n\n      findQuery(folder);\n    });\n    this.setState({ tree: newTree });\n  };\n\n  openDefaultPath = () => {\n    const { tree } = this.state;\n    const newTree = JSON.parse(JSON.stringify(tree));\n    const pathFromProps = this.props.expandedFolders;\n\n    newTree.forEach((branch) => {\n      const branchToString = JSON.stringify(branch);\n\n      pathFromProps.forEach((pathEl) => {\n        let pathElToArr = pathEl.split(\"/\");\n        let isPresent = true;\n\n        pathElToArr.forEach((path) => {\n          if (!branchToString.includes(path)) {\n            isPresent = false;\n          }\n        });\n\n        if (!isPresent) {\n          return;\n        }\n\n        const searchFn = (branch, index = 0) => {\n          if (branch.type === \"FILE\") {\n            return;\n          }\n\n          let pathArrAfterCheck = pathElToArr.slice(index, pathElToArr.length);\n          let isPresent = true;\n\n          pathArrAfterCheck.forEach((pathEl) => {\n            if (!JSON.stringify(branch).includes(pathEl)) {\n              isPresent = false;\n              branch.show = false;\n              return;\n            }\n          });\n\n          if (!isPresent) {\n            return;\n          }\n\n          branch.show = true;\n          if (pathArrAfterCheck.length === 1) {\n            return;\n          }\n\n          index++;\n          branch.children.forEach((branchChild) => searchFn(branchChild, index));\n        };\n\n        searchFn(branch);\n      });\n    });\n\n    this.setState({ tree: [...newTree] });\n  };\n\n  render() {\n    const { tree, search } = this.state;\n    return (\n      <App\n        onSubmit={this.handleSubmit}\n        value={search}\n        onChange={this.handleChange}\n        tree={tree}\n        handleClick={this.handleClick}\n      />\n    );\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport AppContainer from \"./AppContainer\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppContainer expandedFolders={[\"VC/UnitTest\", \"SDK/Bootstrapper/Packages/vcredist_arm/en\"]} />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"close\":\"ListItem_close__15tnq\",\"open\":\"ListItem_open__2KCHN ListItem_close__15tnq\",\"file\":\"ListItem_file__3t3Ql ListItem_close__15tnq\"};"],"sourceRoot":""}